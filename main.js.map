{"version":3,"file":"main.js","mappings":"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","sources":["webpack://linked-list/./src/modules/new-node.js","webpack://linked-list/./src/modules/linked-list.js","webpack://linked-list/./src/index.js"],"sourcesContent":["'use strict';\n\nclass Node {\n  constructor(value = null) {\n    this.value = value;\n    this.next = null;\n  }\n}\n\nexport { Node };\n","'use strict';\n\nimport { Node } from './new-node';\n\nclass LinkedList {\n  constructor() {\n    this.head = null;\n    this.tail = null;\n  }\n\n  append(value) {\n    const newNode = new Node(value);\n    if (this.head === null) {\n      this.head = newNode;\n      this.tail = newNode;\n    } else {\n      this.tail.next = newNode;\n      this.tail = newNode;\n    }\n  }\n\n  prepend(value) {\n    const newNode = new Node(value);\n    if (this.head === null) {\n      this.head = newNode;\n      this.tail = newNode;\n    } else {\n      newNode.next = this.head;\n      this.head = newNode;\n    }\n  }\n\n  get size() {\n    let count = 0;\n\n    const getSize = function getSize(node) {\n      count += 1;\n      if (node.next === null) {\n        return count;\n      } else {\n        return getSize(node.next);\n      }\n    };\n    return getSize(this.head);\n  }\n  at(index) {\n    const getNode = function getNode(node, index) {\n      if (index === 0) {\n        return node;\n      } else if (node.next === null && index > 0) {\n        return 'Error: Out of range Index.';\n      } else {\n        return getNode(node.next, index - 1);\n      }\n    };\n    return getNode(this.head, index);\n  }\n  pop() {\n    const remove = function remove(node) {\n      if (node.next.next === null) {\n        node.next = null;\n        return node;\n      } else {\n        return remove(node.next);\n      }\n    };\n    this.tail = remove(this.head);\n  }\n\n  contains(value) {\n    const check = function check(node) {\n      if (node.next === null && node.value !== value) {\n        return false;\n      } else if (node.value === value) {\n        return true;\n      } else {\n        return check(node.next);\n      }\n    };\n    return check(this.head);\n  }\n\n  find(value) {\n    let count = 0;\n    const check = function check(node) {\n      if (node.next === null && node.value !== value) {\n        return null;\n      } else if (node.value === value) {\n        return count;\n      } else {\n        count += 1;\n        return check(node.next);\n      }\n    };\n    return check(this.head);\n  }\n  toString() {\n    let string = '';\n    const createString = function createString(node) {\n      if (node.next === null) {\n        return string + `(${node.value}) -> (${node.next})`;\n      } else {\n        string = string + `(${node.value})` + ` -> `;\n        return createString(node.next);\n      }\n    };\n    return createString(this.head);\n  }\n\n  insertAt(value, index) {\n    const newNode = new Node(value);\n    if (index === 0) {\n      if (this.head === null) {\n        this.head = newNode;\n        this.tail = newNode;\n      } else {\n        newNode.next = this.head;\n        this.head = newNode;\n      }\n      return;\n    }\n    let count = index;\n\n    const insert = function insert(node, count) {\n      if ((count > 1 && node.next === null) || count < 0) {\n        console.log('Out of range index.');\n        return;\n      }\n      if (count === 1 && node.next === null) {\n        node.next = newNode;\n        return;\n      } else if (count === 1) {\n        newNode.next = node.next;\n        node.next = newNode;\n      } else {\n        insert(node.next, count - 1);\n      }\n    };\n    insert(this.head, count);\n    if (this.tail.next !== null) {\n      this.tail = this.tail.next;\n    }\n  }\n\n  removeAt(index) {\n    if (index === 0) {\n      if (this.head === null) {\n        return;\n      } else {\n        this.head = this.head.next;\n        return;\n      }\n    }\n    const remove = function remove(node, index) {\n      if (\n        (index === 1 && node.next === null) ||\n        index < 0 ||\n        (index > 1 && node.next === null)\n      ) {\n        console.log('Out of range index.');\n        return;\n      } else if (index === 1) {\n        node.next = node.next.next;\n        return;\n      } else {\n        remove(node.next, index - 1);\n      }\n    };\n    remove(this.head, index);\n  }\n}\n\nexport { LinkedList };\n","'use strict';\n\nimport { LinkedList } from './modules/linked-list';\n\nwindow.LinkedList = LinkedList;\n// example uses class syntax - adjust as necessary\nconst list = new LinkedList();\n\nlist.append('dog');\nlist.append('cat');\nlist.append('parrot');\nlist.append('hamster');\nlist.append('snake');\nlist.append('turtle');\n\nconsole.log(list.toString());\n"],"names":["Node","constructor","value","this","next","LinkedList","head","tail","append","newNode","prepend","size","count","getSize","node","at","index","getNode","pop","remove","contains","check","find","toString","string","createString","insertAt","insert","console","log","removeAt","window","list"],"sourceRoot":""}