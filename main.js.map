{"version":3,"file":"main.js","mappings":"mBAEA,MAAMA,EACJ,WAAAC,CAAYC,EAAQ,MAClBC,KAAKD,MAAQA,EACbC,KAAKC,KAAO,IACd,ECDFC,OAAOC,WCDP,MACE,WAAAL,GACEE,KAAKI,KAAO,KACZJ,KAAKK,KAAO,IACd,CAEA,MAAAC,CAAOP,GACL,MAAMQ,EAAU,IAAIV,EAAKE,GACP,OAAdC,KAAKI,MACPJ,KAAKI,KAAOG,EACZP,KAAKK,KAAOE,IAEZP,KAAKK,KAAKJ,KAAOM,EACjBP,KAAKK,KAAOE,EAEhB,CAEA,OAAAC,CAAQT,GACN,MAAMQ,EAAU,IAAIV,EAAKE,GACP,OAAdC,KAAKI,MACPJ,KAAKI,KAAOG,EACZP,KAAKK,KAAOE,IAEZA,EAAQN,KAAOD,KAAKI,KACpBJ,KAAKI,KAAOG,EAEhB,CAEA,QAAIE,GACF,IAAIC,EAAQ,EAUZ,OARgB,SAASC,EAAQC,GAE/B,OADAF,GAAS,EACS,OAAdE,EAAKX,KACAS,EAEAC,EAAQC,EAAKX,KAExB,CACOU,CAAQX,KAAKI,KACtB,CACA,EAAAS,CAAGC,GAUD,OATgB,SAASC,EAAQH,EAAME,GACrC,OAAc,IAAVA,EACKF,EACgB,OAAdA,EAAKX,MAAiBa,EAAQ,EAChC,6BAEAC,EAAQH,EAAKX,KAAMa,EAAQ,EAEtC,CACOC,CAAQf,KAAKI,KAAMU,EAC5B,CACA,GAAAE,GASEhB,KAAKK,KARU,SAASY,EAAOL,GAC7B,OAAuB,OAAnBA,EAAKX,KAAKA,MACZW,EAAKX,KAAO,KACLW,GAEAK,EAAOL,EAAKX,KAEvB,CACYgB,CAAOjB,KAAKI,KAC1B,CAEA,QAAAc,CAASnB,GAUP,OATc,SAASoB,EAAMP,GAC3B,OAAkB,OAAdA,EAAKX,MAAiBW,EAAKb,QAAUA,KAE9Ba,EAAKb,QAAUA,GAGjBoB,EAAMP,EAAKX,MAEtB,CACOkB,CAAMnB,KAAKI,KACpB,CAEA,IAAAgB,CAAKrB,GACH,IAAIW,EAAQ,EAWZ,OAVc,SAASS,EAAMP,GAC3B,OAAkB,OAAdA,EAAKX,MAAiBW,EAAKb,QAAUA,EAChC,KACEa,EAAKb,QAAUA,EACjBW,GAEPA,GAAS,EACFS,EAAMP,EAAKX,MAEtB,CACOkB,CAAMnB,KAAKI,KACpB,CACA,QAAAiB,GACE,IAAIC,EAAS,GASb,OARqB,SAASC,EAAaX,GACzC,OAAkB,OAAdA,EAAKX,KACAqB,EAAS,IAAIV,EAAKb,cAAca,EAAKX,SAE5CqB,GAAkB,IAAIV,EAAKb,aACpBwB,EAAaX,EAAKX,MAE7B,CACOsB,CAAavB,KAAKI,KAC3B,CAEA,QAAAoB,CAASzB,EAAOe,GACd,MAAMP,EAAU,IAAIV,EAAKE,GACzB,GAAc,IAAVe,EAQF,YAPkB,OAAdd,KAAKI,MACPJ,KAAKI,KAAOG,EACZP,KAAKK,KAAOE,IAEZA,EAAQN,KAAOD,KAAKI,KACpBJ,KAAKI,KAAOG,IAIhB,IAAIG,EAAQI,GAEG,SAASW,EAAOb,EAAMF,GAC9BA,EAAQ,GAAmB,OAAdE,EAAKX,MAAkBS,EAAQ,EAC/CgB,QAAQC,IAAI,uBAGA,IAAVjB,GAA6B,OAAdE,EAAKX,KAGH,IAAVS,GACTH,EAAQN,KAAOW,EAAKX,KACpBW,EAAKX,KAAOM,GAEZkB,EAAOb,EAAKX,KAAMS,EAAQ,GAN1BE,EAAKX,KAAOM,CAQhB,CACAkB,CAAOzB,KAAKI,KAAMM,GACK,OAAnBV,KAAKK,KAAKJ,OACZD,KAAKK,KAAOL,KAAKK,KAAKJ,KAE1B,CAEA,QAAA2B,CAASd,GACP,GAAc,IAAVA,EACF,OAAkB,OAAdd,KAAKI,UACP,OAEAJ,KAAKI,KAAOJ,KAAKI,KAAKH,OAIX,SAASgB,EAAOL,EAAME,GAEtB,IAAVA,GAA6B,OAAdF,EAAKX,MACrBa,EAAQ,GACPA,EAAQ,GAAmB,OAAdF,EAAKX,KAEnByB,QAAQC,IAAI,uBAEO,IAAVb,EAITG,EAAOL,EAAKX,KAAMa,EAAQ,GAH1BF,EAAKX,KAAOW,EAAKX,KAAKA,IAK1B,CACAgB,CAAOjB,KAAKI,KAAMU,EACpB,GCtKAY,QAAQG,QA0BRH,QAAQC,IAAI,QAEZD,QAAQC,IACN,sIAGA,sCACA,kCACA,sCAGFD,QAAQC,IACN,uEACA,uCAEFG,OAAOC,QAjCe,CACpB,gBAAiB,gDACjB,iBAAkB,kDAClBtB,KAAM,iEACNL,KAAM,wBACNC,KAAM,wBACN,YAAa,sCACb,QAAS,yCACT,kBACE,4DACF,cACE,uEACF,aACE,mEACF,yBACE,iEACF,kBAAmB,wCAiBS2B,QAAQ,EAAEC,EAAQC,OAxChD,SAAyBD,EAAQE,GAC/BT,QAAQU,eAAe,KAAKH,IAAU,oCACtCP,QAAQC,IAAI,KAAKQ,IAAe,iBAChCT,QAAQW,UACV,CAqCEC,CAAgBL,EAAQC,I","sources":["webpack://linked-list/./src/modules/new-node.js","webpack://linked-list/./src/index.js","webpack://linked-list/./src/modules/linked-list.js","webpack://linked-list/./src/modules/console-info.js"],"sourcesContent":["'use strict';\n\nclass Node {\n  constructor(value = null) {\n    this.value = value;\n    this.next = null;\n  }\n}\n\nexport { Node };\n","'use strict';\n\nimport { LinkedList } from './modules/linked-list';\nimport { addInfoToConsole } from './modules/console-info';\n\nwindow.LinkedList = LinkedList;\naddInfoToConsole();\n","'use strict';\n\nimport { Node } from './new-node';\n\nclass LinkedList {\n  constructor() {\n    this.head = null;\n    this.tail = null;\n  }\n\n  append(value) {\n    const newNode = new Node(value);\n    if (this.head === null) {\n      this.head = newNode;\n      this.tail = newNode;\n    } else {\n      this.tail.next = newNode;\n      this.tail = newNode;\n    }\n  }\n\n  prepend(value) {\n    const newNode = new Node(value);\n    if (this.head === null) {\n      this.head = newNode;\n      this.tail = newNode;\n    } else {\n      newNode.next = this.head;\n      this.head = newNode;\n    }\n  }\n\n  get size() {\n    let count = 0;\n\n    const getSize = function getSize(node) {\n      count += 1;\n      if (node.next === null) {\n        return count;\n      } else {\n        return getSize(node.next);\n      }\n    };\n    return getSize(this.head);\n  }\n  at(index) {\n    const getNode = function getNode(node, index) {\n      if (index === 0) {\n        return node;\n      } else if (node.next === null && index > 0) {\n        return 'Error: Out of range Index.';\n      } else {\n        return getNode(node.next, index - 1);\n      }\n    };\n    return getNode(this.head, index);\n  }\n  pop() {\n    const remove = function remove(node) {\n      if (node.next.next === null) {\n        node.next = null;\n        return node;\n      } else {\n        return remove(node.next);\n      }\n    };\n    this.tail = remove(this.head);\n  }\n\n  contains(value) {\n    const check = function check(node) {\n      if (node.next === null && node.value !== value) {\n        return false;\n      } else if (node.value === value) {\n        return true;\n      } else {\n        return check(node.next);\n      }\n    };\n    return check(this.head);\n  }\n\n  find(value) {\n    let count = 0;\n    const check = function check(node) {\n      if (node.next === null && node.value !== value) {\n        return null;\n      } else if (node.value === value) {\n        return count;\n      } else {\n        count += 1;\n        return check(node.next);\n      }\n    };\n    return check(this.head);\n  }\n  toString() {\n    let string = '';\n    const createString = function createString(node) {\n      if (node.next === null) {\n        return string + `(${node.value}) -> (${node.next})`;\n      } else {\n        string = string + `(${node.value})` + ` -> `;\n        return createString(node.next);\n      }\n    };\n    return createString(this.head);\n  }\n\n  insertAt(value, index) {\n    const newNode = new Node(value);\n    if (index === 0) {\n      if (this.head === null) {\n        this.head = newNode;\n        this.tail = newNode;\n      } else {\n        newNode.next = this.head;\n        this.head = newNode;\n      }\n      return;\n    }\n    let count = index;\n\n    const insert = function insert(node, count) {\n      if ((count > 1 && node.next === null) || count < 0) {\n        console.log('Out of range index.');\n        return;\n      }\n      if (count === 1 && node.next === null) {\n        node.next = newNode;\n        return;\n      } else if (count === 1) {\n        newNode.next = node.next;\n        node.next = newNode;\n      } else {\n        insert(node.next, count - 1);\n      }\n    };\n    insert(this.head, count);\n    if (this.tail.next !== null) {\n      this.tail = this.tail.next;\n    }\n  }\n\n  removeAt(index) {\n    if (index === 0) {\n      if (this.head === null) {\n        return;\n      } else {\n        this.head = this.head.next;\n        return;\n      }\n    }\n    const remove = function remove(node, index) {\n      if (\n        (index === 1 && node.next === null) ||\n        index < 0 ||\n        (index > 1 && node.next === null)\n      ) {\n        console.log('Out of range index.');\n        return;\n      } else if (index === 1) {\n        node.next = node.next.next;\n        return;\n      } else {\n        remove(node.next, index - 1);\n      }\n    };\n    remove(this.head, index);\n  }\n}\n\nexport { LinkedList };\n","'use strict';\n\nconst addInfoToConsole = function addInfoToConsole() {\n  console.clear();\n  function logStyledMethod(method, description) {\n    console.groupCollapsed(`%c${method}`, 'color: black; font-weight: bold;');\n    console.log(`%c${description}`, 'color: black;');\n    console.groupEnd();\n  }\n\n  // introduction for users using console\n  const linkedListAPI = {\n    'append(value)': 'Adds a new node at the end of the linked list',\n    'prepend(value)': 'Adds a new node at the start of the linked list',\n    size: 'An accessor property which returns the size of the linked list',\n    head: 'Returns the head node',\n    tail: 'Returns the tail node',\n    'at(index)': 'Returns the node at the given index',\n    'pop()': 'Removes the last element from the list',\n    'contains(value)':\n      'Returns true if the value is in the list, otherwise false',\n    'find(value)':\n      'Returns the index of the node containing value, or null if not found',\n    'toString()':\n      'Prints the linked list in format: ( value ) -> ( value ) -> null',\n    'insertAt(value, index)':\n      'Inserts a new node with the given value at the specified index',\n    'removeAt(index)': 'Removes the node at the given index',\n  };\n  console.log('\\n\\n');\n\n  console.log(\n    `%cYou can use the %cLinkedList()%c constructor to create a new linked list.\n    example use: const  list = new LinkedList()\n     `,\n    'color: #6a5acd; font-weight: bold; ',\n    'color: red; font-weight: bold; ',\n    'color: #6a5acd; font-weight: bold;',\n  );\n\n  console.log(\n    '%cBelow is a list of methods and properties you can use on a list:\\n',\n    'color: #20b2aa; font-weight: bold;;',\n  );\n  Object.entries(linkedListAPI).forEach(([method, desc]) => {\n    logStyledMethod(method, desc);\n  });\n};\n\nexport { addInfoToConsole };\n"],"names":["Node","constructor","value","this","next","window","LinkedList","head","tail","append","newNode","prepend","size","count","getSize","node","at","index","getNode","pop","remove","contains","check","find","toString","string","createString","insertAt","insert","console","log","removeAt","clear","Object","entries","forEach","method","desc","description","groupCollapsed","groupEnd","logStyledMethod"],"sourceRoot":""}