(()=>{"use strict";class e{constructor(e=null){this.value=e,this.next=null}}window.LinkedList=class{constructor(){this.head=null,this.tail=null}append(t){const n=new e(t);null===this.head?(this.head=n,this.tail=n):(this.tail.next=n,this.tail=n)}prepend(t){const n=new e(t);null===this.head?(this.head=n,this.tail=n):(n.next=this.head,this.head=n)}get size(){let e=0;return function t(n){return e+=1,null===n.next?e:t(n.next)}(this.head)}at(e){return function e(t,n){return 0===n?t:null===t.next&&n>0?"Error: Out of range Index.":e(t.next,n-1)}(this.head,e)}pop(){this.tail=function e(t){return null===t.next.next?(t.next=null,t):e(t.next)}(this.head)}contains(e){return function t(n){return(null!==n.next||n.value===e)&&(n.value===e||t(n.next))}(this.head)}find(e){let t=0;return function n(l){return null===l.next&&l.value!==e?null:l.value===e?t:(t+=1,n(l.next))}(this.head)}toString(){let e="";return function t(n){return null===n.next?e+`(${n.value}) -> (${n.next})`:(e+=`(${n.value}) -> `,t(n.next))}(this.head)}insertAt(t,n){const l=new e(t);if(0===n)return void(null===this.head?(this.head=l,this.tail=l):(l.next=this.head,this.head=l));let i=n;!function e(t,n){n>1&&null===t.next||n<0?console.log("Out of range index."):1!==n||null!==t.next?1===n?(l.next=t.next,t.next=l):e(t.next,n-1):t.next=l}(this.head,i),null!==this.tail.next&&(this.tail=this.tail.next)}removeAt(e){if(0===e)return null===this.head?void 0:void(this.head=this.head.next);!function e(t,n){1===n&&null===t.next||n<0||n>1&&null===t.next?console.log("Out of range index."):1!==n?e(t.next,n-1):t.next=t.next.next}(this.head,e)}},console.clear(),console.log("\n\n"),console.log("%cYou can use the %cLinkedList()%c constructor to create a new linked list.\n    example use: const  list = new LinkedList()\n     ","color: #6a5acd; font-weight: bold; ","color: red; font-weight: bold; ","color: #6a5acd; font-weight: bold;"),console.log("%cBelow is a list of methods and properties you can use on a list:\n","color: #20b2aa; font-weight: bold;;"),Object.entries({"append(value)":"Adds a new node at the end of the linked list","prepend(value)":"Adds a new node at the start of the linked list",size:"An accessor property which returns the size of the linked list",head:"Returns the head node",tail:"Returns the tail node","at(index)":"Returns the node at the given index","pop()":"Removes the last element from the list","contains(value)":"Returns true if the value is in the list, otherwise false","find(value)":"Returns the index of the node containing value, or null if not found","toString()":"Prints the linked list in format: ( value ) -> ( value ) -> null","insertAt(value, index)":"Inserts a new node with the given value at the specified index","removeAt(index)":"Removes the node at the given index"}).forEach(([e,t])=>{!function(e,t){console.groupCollapsed(`%c${e}`,"color: black; font-weight: bold;"),console.log(`%c${t}`,"color: black;"),console.groupEnd()}(e,t)})})();
//# sourceMappingURL=main.js.map